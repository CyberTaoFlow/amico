Please follow the below given steps to use AMICO:

1. AMICO uses Postgres database. 
   Create a postgres database and a user account. Make this user the owner
   of the newly created database. 
   Example POSTGRES commands for the above task:
	CREATE USER pe_dumper WITH PASSWORD 'pass'
	CREATE DATABASE amico_db
	ALTER DATABASE amico_db OWNER TO pe_dumper
  
   Then, update these details in the config.py file. 

2. Run the db_setup.py script. This script 
   creates the POSTGRES tables needed for storing the data about PE files.

3. Run pe_dump.c along with process_pe_dump.sh. To get the usage information,
   run the scripts with no arguments.

4. The database tables in pe_dump_db can be deleted by running the db_cleanup.py
   script. 



AMICO's code is currently in 3 directories.
* PE_DUMP: 
    This is the download reconstruction module.

* AMICO Scripts: 
    A chain of scripts that collect partial ground truth using virus total,
    extract feature vectors, do the online classification using the model 
    and finally generate syslog alerts.
    These can all be run in order by using "start_amico_scripts.sh" file in 
    that directory.

    A brief description of some of file in amico_scripts:

    1. config.py: The configuration file for the database information
    2. db_setup.py: Creates the database tables for pe_dump using config.py
    3. db_cleanup.py: Drops the tables created by db_setup.py
    4. process_dump.sh: Uses pe_extract.py, db_pe_dumps.py and db_cleanup.py
        to move, parse and store the extracted data. Also, it stores the 
            built PE files in a directory named "pe_files" and the raw files
            output by pe_dump.c in a directory named "raw_files". Both the 
            directories are created in the destination directory specified.
    5. db_pe_dumps.py: Parses the data in the RAW files, and creates records in
            the pe_dumps table.
    6. db_virus_total.py: Makes queries to the Virus Total Database 
        (http://www.virustotal.com) about the constructed PE files and 
            stores the resulting information in virus_total_scans table
    7. pe_extract.py: Extracts PE files by stripping the raw files output by
         pe_dump.c 

* Training: 
    A collection of scripts used for training the classifier. 

